# Docker Compose 配置文件 - 分布式任务调度系统本地开发环境

version: '3.8'

services:
  # ============================================================================
  # 数据库服务 - PostgreSQL
  # ============================================================================
  postgres:
    image: postgres:15-alpine
    container_name: scheduler-postgres
    environment:
      POSTGRES_DB: scheduler
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 123456
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./migrations:/docker-entrypoint-initdb.d/
    networks:
      - scheduler-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d scheduler"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # ============================================================================
  # 消息队列服务 - RabbitMQ
  # ============================================================================
  rabbitmq:
    image: rabbitmq:3.12-management-alpine
    container_name: scheduler-rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
      RABBITMQ_DEFAULT_VHOST: /
    ports:
      - "5672:5672"    # AMQP 端口
      - "15672:15672"  # 管理界面端口
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - scheduler-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # ============================================================================
  # 调度器服务 - Dispatcher
  # ============================================================================
  dispatcher:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
    container_name: scheduler-dispatcher
    environment:
      - RUST_LOG=debug
      - RUST_BACKTRACE=1
      - DATABASE_URL=postgresql://postgres:123456@postgres:5432/scheduler
      - MESSAGE_QUEUE_URL=amqp://guest:guest@rabbitmq:5672
    command: ["scheduler", "--config", "config/development.toml", "--mode", "dispatcher"]
    ports:
      - "8080:8080"
    volumes:
      - ./config:/app/config:ro
      - ./logs:/var/log/scheduler
    networks:
      - scheduler-network
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  # ============================================================================
  # API 服务器
  # ============================================================================
  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
    container_name: scheduler-api
    environment:
      - RUST_LOG=debug
      - RUST_BACKTRACE=1
      - DATABASE_URL=postgresql://postgres:123456@postgres:5432/scheduler
      - MESSAGE_QUEUE_URL=amqp://guest:guest@rabbitmq:5672
    command: ["scheduler", "--config", "config/development.toml", "--mode", "api"]
    ports:
      - "8081:8080"
    volumes:
      - ./config:/app/config:ro
      - ./logs:/var/log/scheduler
    networks:
      - scheduler-network
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  # ============================================================================
  # Worker 节点 1
  # ============================================================================
  worker-1:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
    container_name: scheduler-worker-1
    environment:
      - RUST_LOG=debug
      - RUST_BACKTRACE=1
      - DATABASE_URL=postgresql://postgres:123456@postgres:5432/scheduler
      - MESSAGE_QUEUE_URL=amqp://guest:guest@rabbitmq:5672
    command: ["scheduler", "--config", "config/development.toml", "--mode", "worker", "--worker-id", "worker-1"]
    volumes:
      - ./config:/app/config:ro
      - ./logs:/var/log/scheduler
    networks:
      - scheduler-network
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      dispatcher:
        condition: service_healthy
    restart: unless-stopped

  # ============================================================================
  # Worker 节点 2
  # ============================================================================
  worker-2:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
    container_name: scheduler-worker-2
    environment:
      - RUST_LOG=debug
      - RUST_BACKTRACE=1
      - DATABASE_URL=postgresql://postgres:123456@postgres:5432/scheduler
      - MESSAGE_QUEUE_URL=amqp://guest:guest@rabbitmq:5672
    command: ["scheduler", "--config", "config/development.toml", "--mode", "worker", "--worker-id", "worker-2"]
    volumes:
      - ./config:/app/config:ro
      - ./logs:/var/log/scheduler
    networks:
      - scheduler-network
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      dispatcher:
        condition: service_healthy
    restart: unless-stopped

  # ============================================================================
  # 监控服务 - Prometheus (可选)
  # ============================================================================
  prometheus:
    image: prom/prometheus:latest
    container_name: scheduler-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - scheduler-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    profiles:
      - monitoring

  # ============================================================================
  # 监控服务 - Grafana (可选)
  # ============================================================================
  grafana:
    image: grafana/grafana:latest
    container_name: scheduler-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - scheduler-network
    depends_on:
      - prometheus
    restart: unless-stopped
    profiles:
      - monitoring

# ============================================================================
# 网络配置
# ============================================================================
networks:
  scheduler-network:
    driver: bridge
    name: scheduler-network

# ============================================================================
# 数据卷配置
# ============================================================================
volumes:
  postgres_data:
    name: scheduler-postgres-data
  rabbitmq_data:
    name: scheduler-rabbitmq-data
  prometheus_data:
    name: scheduler-prometheus-data
  grafana_data:
    name: scheduler-grafana-data